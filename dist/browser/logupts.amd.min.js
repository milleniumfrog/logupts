define(["exports"],function(e){"use strict";class t{constructor(e,t){this.key=e,this.replaceVar=t}replace(e,t){return"string"==typeof this.replaceVar?this.replaceVar:0===t.length?this.replaceVar(e):(t=`[${t}]`,this.replaceVar(e,JSON.parse(t)))}}let r={date:new t("date",`${s(2,String((new Date).getDate()))}`),day:new t("day",`${s(2,String((new Date).getDay()))}`),month:new t("month",`${s(2,String((new Date).getMonth()+1))}`),fullYear:new t("fullYear",`${(new Date).getFullYear()}`),year:new t("year",`${(new Date).getFullYear()}`),hours:new t("hours",`${s(2,String((new Date).getHours()))}`),minutes:new t("minutes",`${s(2,String((new Date).getMinutes()))}`),seconds:new t("seconds",`${s(2,String((new Date).getSeconds()))}`),frog:new t("frog","All Contributers: milleniumfrog"),service:new t("service",e=>`[${e.activeService}]`)};function s(e,t){if(e<t.length)throw new Error("the message is longer than the wished length.");for(let r=t.length;r<e;++r)t="0"+t;return t}e.Placeholder=t,e.defaultPlaceholders=r,e.LogUpTs=class{constructor(e={},t=!1){this.debug=t,this.loguptsOptions=this.defaultLogUpTsOptions(),this.placeholderVars={activeService:"LOG"},this.loguptsOptions=this.mergeLogUpTsOptions(this.loguptsOptions,e)}generateString(e){e=e||"";let t=this.loguptsOptions.placeholders||{};for(let r in t){let s=new RegExp(`{{${t[r].key}}}`,"gi");e=e.replace(s,t[r].replace(this.placeholderVars,""))}return e}static generateString(e,t){t=t||"";let r=e.loguptsOptions.placeholders||{};for(let s in r){let i=new RegExp(`{{${r[s].key}}}`,"gi");t=t.replace(i,r[s].replace(e.placeholderVars,""))}return t}defaultLogUpTsOptions(){return{prefix:"{{service}} ",postfix:"",placeholders:r,quiet:!1,transports:[],customAsyncExecutions:[],customExecutions:[]}}mergeStringArray(e){let t="";for(let r of e)"string"!=typeof r&&(r=this.mergeStringArray(r)),t+=r;return t}prepareLogUpTsOptions(e,t){if("string"==typeof e){if(void 0===t)throw new TypeError("if loguptsOptions is a string then the messageArr is needed");return t.unshift(e),this.loguptsOptions}if(void 0===e){if(void 0===t)throw new TypeError("if loguptsOptions is a string then the messageArr is needed");return t.unshift(""),this.loguptsOptions}{let t=this.copyLotUpTsOptions(this.loguptsOptions);for(let r in e)t[r]=e[r];return t}}mergeLogUpTsOptions(e,t){let r=this.copyLotUpTsOptions(e);for(let e in t)r[e]=t[e];return r}copyLotUpTsOptions(e){let r=this.defaultLogUpTsOptions();for(let s in e)switch(s){case"placeholders":let i={},n=r.placeholders||{},o=e.placeholders||{};for(let e in n)i[e]=new t(e,n[e].replaceVar);for(let e in o)i[e]=new t(e,o[e].replaceVar);r.placeholders=i;break;case"transports":let l=(r.transports||[]).slice(0),p=e.transports||[];for(let e of p)l.push(e);r.transports=l;break;case"customExecutions":let a=(r.customExecutions||[]).slice(0);for(let t of e.customExecutions||[])a.push(t);r.customExecutions=a;break;case"customAsyncExecutions":let c=(r.customAsyncExecutions||[]).slice(0);for(let t of e.customAsyncExecutions||[])c.push(t);r.customAsyncExecutions=c;break;default:r[s]=e[s]}return r}execInternalOptions(e){for(let t in e)switch(t){case"activeService":this.placeholderVars.activeService=e.activeService}}internal(e,t,...r){let s=this.mergeLogUpTsOptions(this.loguptsOptions,e);this.execInternalOptions(t);let i=s.prefix+this.mergeStringArray(r)+s.postfix;i=this.generateString(i);for(let e of s.customExecutions||[])e();if(s.quiet||console.log(i),0===(s.transports||[]).length&&0===(s.customAsyncExecutions||[]).length)return i;{let e=[],r=s.transports||[];for(let s of r)e.push(s.exec(t||{},i));for(let t of s.customAsyncExecutions||[])e.push(t());return Promise.all(e).then(()=>i)}}log(e,...t){let r=this.prepareLogUpTsOptions(e,t);return this.internal(r||{},{activeService:"LOG",groups:["ALL","LOG"]},t)}warn(e,...t){let r=this.prepareLogUpTsOptions(e,t);return this.internal(r||{},{activeService:"WARN",groups:["ALL","WARN"]},t)}error(e,...t){let r=this.prepareLogUpTsOptions(e,t);return this.internal(r||{},{activeService:"ERROR",groups:["ALL","ERROR"]},t)}info(e,...t){let r=this.prepareLogUpTsOptions(e,t);return this.internal(r||{},{activeService:"INFO",groups:["ALL","INFO"]},t)}custom(e,t,r,...s){let i=this.prepareLogUpTsOptions(r,s),n={activeService:"CUSTOM",groups:["ALL","CUSTOM",e]};return i.prefix=e,i.postfix=t,this.internal(i||{},n,s)}},Object.defineProperty(e,"__esModule",{value:!0})});