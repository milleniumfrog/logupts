{"version":3,"file":"logupts.umd.js","sources":["../node_modules/strplace/src/strplace.ts","../src/placeholder.ts","../src/logupts.ts"],"sourcesContent":["export function replaceSingle( key: string, string: string, replaceContent: any, flags?: string, passArguments?: any): string {\n\t// set default flags\n\tflags = flags || 'g';\n\t// create Regex\n\tlet regex = new RegExp( key, flags );\n\tlet res: RegExpExecArray | null;\n\tlet counter: number = 0;\n\twhile( (res = regex.exec( string.slice( counter ) )) !== null ) {\n\t\tkey = key.replace( (new RegExp( '\\\\\\\\', 'g')), '' )\n\t\tstring = string.replace( key, typeof replaceContent === 'function' ? replaceContent( '', passArguments ) : replaceContent );\n\t\t++counter;\n\t}\n\treturn string;\n};\n\nexport interface ComplexKey {\n\tkeys: Array<string>;\n\treplacer: ( ( str?: string, passArguments?: any ) => string );\n\tflags: string;\n\t/** for more perfomance with single key placeholders */\n\tcalled?: boolean;\n}\n\n\nexport function replaceComplex ( complexKeys: Array<ComplexKey>, string: string, passArguments?: any) : string {\n\tfor ( let complex of complexKeys )\n\t{\n\t\t// single key placeholders\n\t\tif ( complex.keys[1] === undefined )\n\t\t{\n\t\t\tstring = complex.called !== true ? replaceSingle( complex.keys[0], string, (args?: string, toPass?: any) => { return complex.replacer('', toPass) }, complex.flags, passArguments ) : string;\n\t\t}\n\t\t// 2 key placeholders\n\t\telse\n\t\t{\n\t\t\tlet maxIndex = -1;\n\t\t\tfor ( let inComplex of complexKeys ) \n\t\t\t{\n\t\t\t\t// create Regular expression\n\t\t\t\tlet regex: RegExp = new RegExp( inComplex.keys[0], inComplex.flags );\n\t\t\t\tlet res: RegExpExecArray | null = regex.exec( string );\n\t\t\t\tif ( res !== null ) {\n\t\t\t\t\tmaxIndex = maxIndex < res.index ? res.index : maxIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( maxIndex > 0 )\n\t\t\t{\n\t\t\t\tstring = string.slice(0, maxIndex) + replaceComplex( complexKeys, string.slice( maxIndex ) );\n\t\t\t}\n\t\t\t// search index where pattern is first time\n\t\t\tlet regex: RegExp = new RegExp( complex.keys[0], complex.flags );\n\t\t\tlet res1: RegExpExecArray | null = regex.exec( string );\n\t\t\tif ( res1 !== null )\n\t\t\t{\n\t\t\t\t// find closing pattern in string\n\t\t\t\tregex = new RegExp( complex.keys[1], complex.flags );\n\t\t\t\tlet res2 = regex.exec( string );\n\t\t\t\tlet removeEscapesFromKeys: string[] = [ complex.keys[0].replace( (new RegExp( '\\\\\\\\', 'g')), '' ), complex.keys[1].replace( (new RegExp( '\\\\\\\\', 'g')), '' )]\n\t\t\t\tif ( res2 !== null )\n\t\t\t\t{\n\t\t\t\t\t// create new string\n\t\t\t\t\tstring = string.slice( 0, res1.index ) + complex.replacer( string.slice( res1.index + removeEscapesFromKeys[0].length , res2.index ), passArguments ) + string.slice( res2.index + removeEscapesFromKeys[1].length);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn string;\n}","import { ComplexKey as Placeholder } from 'strplace';\n\nexport { ComplexKey as Placeholder, replaceComplex as replacePlaceholder } from 'strplace';\n\nexport const DefaultPlaceholders: Placeholder[] = [\n    // get day 1-31\n    {\n        keys: ['{{date}}'],\n        replacer: () => {\n            return `${fillStrWithZeros(2, String((new Date()).getDate()))}`;\n        },\n        flags: 'g'\n    }, \n    {\n        keys: ['{{day}}'],\n        replacer: () => {\n            return `${fillStrWithZeros(2, String((new Date()).getDay()))}`;\n        },\n        flags: 'g'\n    }, \n    {\n        keys: ['{{month}}'],\n        replacer: () => {\n            return `${fillStrWithZeros(2, String((new Date()).getMonth()+1))}`;\n        },\n        flags: 'g'\n    },\n    {\n        keys: ['{{year}}'],\n        replacer: () => {\n            return `${(new Date()).getFullYear()}`;\n        },\n        flags: 'g'\n    },\n    {\n        keys: ['{{hours}}'],\n        replacer: () => {\n            return `${fillStrWithZeros(2, String((new Date()).getHours()))}`;\n        },\n        flags: 'g'\n    },\n    {\n        keys: ['{{minutes}}'],\n        replacer: () => {\n            return `${fillStrWithZeros(2, String((new Date()).getMinutes()))}`;\n        },\n        flags: 'g'\n    },\n    {\n        keys: ['{{seconds}}'],\n        replacer: () => {\n            return `${fillStrWithZeros(2, String((new Date()).getSeconds()))}`;\n        },\n        flags: 'g'\n    },\n    {\n        keys: ['{{service}}'],\n        replacer: ( none?: string, passArguments?: any) => {\n            return `[${passArguments.service || 'DEFAULT'}]`;\n        },\n        flags: 'g'\n    },\n];\n\n/**\n * fill up a string with zeros\n * @param length \n * @param msg \n */\nexport function fillStrWithZeros(length: number, msg: string) {\n    if (length < msg.length) {\n        throw new Error('the message is longer than the wished length.');\n    } else {\n        for (let i = msg.length; i < length; ++i) {\n            msg = '0' + msg;\n        }\n    }\n    return msg;\n}","import { Placeholder, DefaultPlaceholders, replacePlaceholder } from './placeholder';\n\nexport { Placeholder, DefaultPlaceholders, replacePlaceholder } from './placeholder';\n\n/**\n * Transport Logmessage to any destination (for example files)\n */\nexport interface Transport< T = LogUpTsTemplateTypeInterface > {\n    exec: ( transportOptions: T, modifiedMessage: string, orginalMessage: string ) => Promise<void>;\n}\n\nexport interface LogUpTsTemplateTypeInterface {\n\t[ index: string ]: any,\n\tservice: string;\n}\n\n\nexport enum LOGLEVEL {\n\tTRACE, \n\tDEBUG,\n\tINFO,\n\tWARN,\n\tERROR,\n\tOFF\n}\n/**\n * configure LogUpTs\n * configure\n * - prefix\n * - postfix\n * - placeholders\n * - quiet (log it to console)\n * - transports\n * - customfunction (run functions when log gets executed)\n * - logtype (log/info/error)\n * - logstack\n */\nexport interface LogUpTsOptions<T = LogUpTsTemplateTypeInterface> {\n    /** set the prefix */\n    prefix?: string;\n    /** postfix */\n    postfix?: string;\n    /** all Placeholders */\n    placeholders?: Placeholder[];\n    /** supress console output */\n    quiet?: boolean;\n    /** write to File or other destinations */\n    transports?: Transport[];\n    /** execute custom functions when calling the function */\n    customFunctions?: (( param: string, internals: T, options: LogUpTsOptions<T> ) => Promise<void>)[];\n    /** log, warn, error, trace */\n    logType?: \"log\"|\"warn\"|\"error\"|\"trace\"|\"debug\";\n    /** log error.stack to console */\n\tlogStack?: boolean;\n\t/** set loglevel  */\n\tlogLevel?: LOGLEVEL;\n}\n\n/**\n * default LogUpTsoptions\n */\nexport const defaultOptions: LogUpTsOptions<any> = {\n    prefix: '{{service}} ',\n    postfix: '',\n    placeholders: DefaultPlaceholders,\n    quiet: false,\n    transports: [],\n    customFunctions: [],\n    logType: 'log',\n\tlogStack: true,\n\tlogLevel: LOGLEVEL.INFO\n};\n\nexport class LogUpTs<T extends LogUpTsTemplateTypeInterface = { service: string } > {\n    public internals: T;\n    public options: LogUpTsOptions<T>;\n\n    constructor( customOptions?: LogUpTsOptions<T>, setInternals?: T ) {\n        setInternals = setInternals || <T>{};\n        customOptions = customOptions || {};\n        // set loguptsoptions\n        this.options =  this.mergeOptions( customOptions, defaultOptions );\n        // set defaultinternals\n        this.internals = <T>{\n\t\t\tservice: 'log',\n\t\t}\n\t\t// merge setinternals with this.interals\n\t\tObject.assign( this.internals, setInternals );\n    }\n    \n    /**\n     * merge LogUpTs options to one option object\n     * @param customOptions \n     * @param fillOptions \n     */\n    public mergeOptions( customOptions: LogUpTsOptions<T>, fillOptions?: LogUpTsOptions<T> ): LogUpTsOptions<T> {\n\t\tfillOptions = fillOptions || this.options;\n\t\tif( customOptions.quiet )\n\t\t\tcustomOptions.logLevel = LOGLEVEL.OFF;\n        return Object.assign( {}, fillOptions, customOptions );\n    }\n\n    public async custom( customOptions: LogUpTsOptions<T>, setInternals: any, message: string, logLevel: LOGLEVEL = LOGLEVEL.INFO ): Promise<string> {\n        // setoptions\n        let opt = this.mergeOptions( customOptions );\n        // set new Internalvalues\n        for ( let key in setInternals ) {\n            this.internals[key] = setInternals[key];\n        }\n        // generate string\n        let str: string = `${opt.prefix}${message}${opt.postfix}`;\n        str = replacePlaceholder( (this.options.placeholders || []), str, this.internals );\n\t\t// check if quiet or logtype exists\n        if ( (opt.logLevel || 0) <= logLevel && ((<any>console)[ opt.logType || 'log' ] !== undefined) ) {\n            (<any>console)[ opt.logType || 'log' ]( str );\n        }\n\t\tlet asyncThings: Promise<any>[] = [];\n        // add transports\n        for ( let transport of opt.transports || [] ) {\n            asyncThings.push( transport.exec( this.internals, str, message ) );\n        }\n        for ( let asyncExec of opt.customFunctions || [] ) {\n            asyncThings.push( asyncExec( str, this.internals, opt ) );\n        }\n        await Promise.all( asyncThings );\n        return str;\n    };\n\n    /**\n     * a default log\n     * @param str \n     * @param customOptions \n     */\n    public async log( str: string, customOptions?: LogUpTsOptions<T> ): Promise<string> {\n        return this.custom( customOptions || {}, { service: 'LOG' }, str, LOGLEVEL.INFO );\n    }\n\n    /**\n     * log errors\n     * @param error \n     * @param customOptions \n     */\n    public async error( error: string | Error, customOptions?: LogUpTsOptions<T> ): Promise<string> {\n        let opt = this.mergeOptions( customOptions || {} );\n        // set logtype to error -> console.error(str)\n        opt.logType = 'error';\n        let str = error instanceof Error ? `${error.message}${ (opt.logStack && error.stack !== undefined) ? '\\n' + error.stack : ''}` : error;\n        return  this.custom( opt, { service: 'ERROR' }, str, LOGLEVEL.ERROR );\n    }\n\n    /**\n     * warn\n     * @param message \n     * @param customOptions \n     */\n    public async warn( message: string, customOptions?: LogUpTsOptions<T> ): Promise<string> {\n        let opt = this.mergeOptions( customOptions || {} );\n        // set logtype to warn -> console.warn(str)\n        opt.logType = 'warn';\n        return this.custom( opt, { service: 'WARN' }, message, LOGLEVEL.WARN );\n\t}\n\t\n\tpublic async trace( message: string, customOptions?: LogUpTsOptions<T> ): Promise<string> {\n        let opt = this.mergeOptions( customOptions || {} );\n        // set logtype to warn -> console.trace(str)\n        opt.logType = 'trace';\n        return this.custom( opt, { service: 'TRACE' }, message, LOGLEVEL.TRACE );\n\t}\n\n\tpublic async debug( message: string, customOptions?: LogUpTsOptions<T> ): Promise<string> {\n        let opt = this.mergeOptions( customOptions || {} );\n        // set logtype to warn -> console.debug(str)\n        opt.logType = 'debug';\n        return this.custom( opt, { service: 'DEBUG' }, message, LOGLEVEL.DEBUG );\n\t}\n\n\tpublic async info( str: string, customOptions?: LogUpTsOptions<T> ): Promise<string> {\n        return this.custom( customOptions || {}, { service: 'INFO' }, str, LOGLEVEL.INFO );\n    }\n\n}"],"names":["string","complex","key","counter","DefaultPlaceholders","keys","replacer","fillStrWithZeros","String","Date","getDate","flags","getDay","getMonth","getFullYear","getHours","getMinutes","getSeconds","none","passArguments","service","length","msg","Error","i","LOGLEVEL","defaultOptions","prefix","postfix","placeholders","quiet","transports","customFunctions","logType","logStack","logLevel","INFO","customOptions","setInternals","this","options","mergeOptions","internals","Object","assign","LogUpTs","fillOptions","OFF","message","opt","str","replacePlaceholder","undefined","console","asyncThings","_a","_i","transport","push","exec","_c","_b","asyncExec","Promise","all","_d","custom","error","stack","ERROR","WARN","TRACE","DEBUG"],"mappings":"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"}