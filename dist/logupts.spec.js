!function(e){var t={};function o(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(n,r,function(t){return e[t]}.bind(null,r));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=1)}([function(e,t,o){"use strict";o.r(t);const n=[{keys:["{{date}}"],replacer:()=>`${r(2,String((new Date).getDate()))}`,flags:"g"},{keys:["{{day}}"],replacer:()=>`${r(2,String((new Date).getDay()))}`,flags:"g"},{keys:["{{month}}"],replacer:()=>`${r(2,String((new Date).getMonth()+1))}`,flags:"g"},{keys:["{{year}}"],replacer:()=>`${(new Date).getFullYear()}`,flags:"g"},{keys:["{{hours}}"],replacer:()=>`${r(2,String((new Date).getHours()))}`,flags:"g"},{keys:["{{minutes}}"],replacer:()=>`${r(2,String((new Date).getMinutes()))}`,flags:"g"},{keys:["{{seconds}}"],replacer:()=>`${r(2,String((new Date).getSeconds()))}`,flags:"g"},{keys:["{{service}}"],replacer:(e,t)=>`[${t.service||"DEFAULT"}]`,flags:"g"}];function r(e,t){if(e<t.length)throw new Error("the message is longer than the wished length.");for(let o=t.length;o<e;++o)t="0"+t;return t}var i=o(3);o.d(t,"LogUpTs",function(){return c}),o.d(t,"DefaultPlaceholders",function(){return n});var s=function(e,t,o,n){return new(o||(o=Promise))(function(r,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function l(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){e.done?r(e.value):new o(function(t){t(e.value)}).then(s,l)}c((n=n.apply(e,t||[])).next())})};let l={prefix:"{{service}} ",postfix:"",placeholders:n,quiet:!1,transports:[],customFunctions:[],logType:"log",logStack:!0};class c{constructor(e){e=e||{},this.options={prefix:void 0!==e.prefix?e.prefix:l.prefix,postfix:void 0!==e.postfix?e.postfix:l.postfix,placeholders:void 0!==e.placeholders?e.placeholders:l.placeholders,quiet:void 0!==e.quiet?e.quiet:l.quiet,transports:void 0!==e.transports?e.transports:l.transports,customFunctions:void 0!==e.customFunctions?e.customFunctions:l.customFunctions,logType:void 0!==e.logType?e.logType:l.logType,logStack:void 0!==e.logStack?e.logStack:l.logStack},this.internals={service:"LOG"}}mergeOptions(e){return{prefix:void 0!==e.prefix?e.prefix:this.options.prefix,postfix:void 0!==e.postfix?e.postfix:this.options.postfix,placeholders:void 0!==e.placeholders?e.placeholders:this.options.placeholders,quiet:void 0!==e.quiet?e.quiet:this.options.quiet,transports:void 0!==e.transports?e.transports:this.options.transports,customFunctions:void 0!==e.customFunctions?e.customFunctions:this.options.customFunctions,logType:void 0!==e.logType?e.logType:this.options.logType,logStack:void 0!==e.logStack?e.logStack:this.options.logStack}}custom(e,t,o){return s(this,void 0,void 0,function*(){let n=this.mergeOptions(e);for(let e in t)this.internals[e]=t[e];let r=`${n.prefix}${o}${n.postfix}`;r=Object(i.a)(this.options.placeholders||[],r,this.internals);let s=[];for(let e of n.transports||[])s.push(e.exec(this.internals,r));for(let e of n.customFunctions||[])s.push(e(r,this.internals,n));return yield Promise.all(s),n.quiet||void 0===console[n.logType||"log"]||console[n.logType||"log"](r),r})}log(e,t){return s(this,void 0,void 0,function*(){return yield this.custom(t||{},{service:"LOG"},e)})}error(e,t){return s(this,void 0,void 0,function*(){let o=this.mergeOptions(t||{});o.logType="error";let n=e instanceof Error?`${e.message}${o.logStack&&void 0!==e.stack?"\n"+e.stack:""}`:e;return yield this.custom(o,{service:"ERROR"},n)})}}},function(e,t,o){"use strict";o.r(t);var n=o(0),r=function(e,t,o,n){return new(o||(o=Promise))(function(r,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function l(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){e.done?r(e.value):new o(function(t){t(e.value)}).then(s,l)}c((n=n.apply(e,t||[])).next())})};describe("test",()=>{it("log to console without Transport and customFunctions",()=>r(void 0,void 0,void 0,function*(){let e=new n.LogUpTs({quiet:!0}),t=yield e.log("hello");expect(t).toEqual("[LOG] hello"),e.options.prefix="{{year}} ",t=yield e.log("hello"),expect(t).toEqual("2018 hello")})),it("log error to console without Transport and customFunctions",()=>r(void 0,void 0,void 0,function*(){let e=yield new n.LogUpTs({quiet:!0,logStack:!1}).error(new Error("a Error happend"));expect(e).toEqual("Error")}))})},,function(e,t,o){"use strict";function n(e,t,o,n,r){n=n||"g";let i,s=new RegExp(e,n),l=0;for(;null!==(i=s.exec(t.slice(l)));)e=e.replace(new RegExp("\\\\","g"),""),t=t.replace(e,"function"==typeof o?o("",r):o),++l;return t}function r(e,t,o){for(let i of e)if(void 0===i.keys[1])t=!0!==i.called?n(i.keys[0],t,(e,t)=>i.replacer("",t),i.flags,o):t;else{let n=-1;for(let o of e){let e=new RegExp(o.keys[0],o.flags).exec(t);null!==e&&(n=n<e.index?e.index:n)}n>0&&(t=t.slice(0,n)+r(e,t.slice(n)));let s=new RegExp(i.keys[0],i.flags),l=s.exec(t);if(null!==l){let e=(s=new RegExp(i.keys[1],i.flags)).exec(t),n=[i.keys[0].replace(new RegExp("\\\\","g"),""),i.keys[1].replace(new RegExp("\\\\","g"),"")];null!==e&&(t=t.slice(0,l.index)+i.replacer(t.slice(l.index+n[0].length,e.index),o)+t.slice(e.index+n[1].length))}}return t}o.d(t,"b",function(){return n}),o.d(t,"a",function(){return r})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,