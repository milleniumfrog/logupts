!function(e){var r={};function t(l){if(r[l])return r[l].exports;var n=r[l]={i:l,l:!1,exports:{}};return e[l].call(n.exports,n,n.exports,t),n.l=!0,n.exports}t.m=e,t.c=r,t.d=function(e,r,l){t.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:l})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,r){if(1&r&&(e=t(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var l=Object.create(null);if(t.r(l),Object.defineProperty(l,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var n in e)t.d(l,n,function(r){return e[r]}.bind(null,n));return l},t.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(r,"a",r),r},t.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},t.p="",t(t.s=4)}([,,,function(e,r,t){"use strict";function l(e,r,t,l,n){l=l||"g";let i,c=new RegExp(e,l),s=0;for(;null!==(i=c.exec(r.slice(s)));)e=e.replace(new RegExp("\\\\","g"),""),r=r.replace(e,"function"==typeof t?t("",n):t),++s;return r}function n(e,r,t){for(let i of e)if(void 0===i.keys[1])r=!0!==i.called?l(i.keys[0],r,(e,r)=>i.replacer("",r),i.flags,t):r;else{let l=-1;for(let t of e){let e=new RegExp(t.keys[0],t.flags).exec(r);null!==e&&(l=l<e.index?e.index:l)}l>0&&(r=r.slice(0,l)+n(e,r.slice(l)));let c=new RegExp(i.keys[0],i.flags),s=c.exec(r);if(null!==s){let e=(c=new RegExp(i.keys[1],i.flags)).exec(r),l=[i.keys[0].replace(new RegExp("\\\\","g"),""),i.keys[1].replace(new RegExp("\\\\","g"),"")];null!==e&&(r=r.slice(0,s.index)+i.replacer(r.slice(s.index+l[0].length,e.index),t)+r.slice(e.index+l[1].length))}}return r}t.d(r,"b",function(){return l}),t.d(r,"a",function(){return n})},function(e,r,t){"use strict";t.r(r);var l=t(3);describe("replaceSingle",()=>{it("simple",()=>{let e="{{repl}} is replaced";expect(Object(l.b)("{{repl}}",e,"This")).toEqual("This is replaced"),expect(Object(l.b)("{{repl} }",e,"This")).toEqual("{{repl}} is replaced")})}),describe("replace Complex",()=>{it("complex",()=>{let e="<str><hello/> <a>this is a referrer<a>this is a referrer</a></a></str>",r=[{flags:"g",keys:["<hello/>"],replacer:(e,r)=>"hello"},{flags:"g",keys:["<a>","</a>"],replacer:(e,r)=>`<l>${e}</l>`}];expect(Object(l.a)(r,e)).toEqual("<str>hello <l>this is a referrer<l>this is a referrer</l></l></str>"),e="{{str(this is a text)}}",r=[{flags:"g",keys:["\\{\\{str\\(","\\)\\}\\}"],replacer:(e,r)=>`${e||"none"}`},{flags:"g",keys:["\\{\\{service\\}\\}"],replacer:(e,r)=>`[${(r=r||{service:"LOGS"}).service}]`}],expect(Object(l.a)(r,e)).toEqual("this is a text");expect(Object(l.a)(r,"{{service}}",{service:"LOG"})).toEqual("[LOG]")})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,