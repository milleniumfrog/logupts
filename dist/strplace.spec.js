!function(e){var r={};function l(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,l),n.l=!0,n.exports}l.m=e,l.c=r,l.d=function(e,r,t){l.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:t})},l.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},l.t=function(e,r){if(1&r&&(e=l(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(l.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var n in e)l.d(t,n,function(r){return e[r]}.bind(null,n));return t},l.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return l.d(r,"a",r),r},l.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},l.p="",l(l.s=3)}({3:function(e,r,l){"use strict";function t(e,r,l,t,n){t=t||"g";let i,s=new RegExp(e,t),c=0;for(;null!==(i=s.exec(r.slice(c)));)e=e.replace(new RegExp("\\\\","g"),""),r=r.replace(e,"function"==typeof l?l("",n):l),++c;return r}function n(e,r,l){for(let i of e)if(void 0===i.keys[1])r=!0!==i.called?t(i.keys[0],r,(e,r)=>i.replacer("",r),i.flags,l):r;else{let t=-1;for(let l of e){let e=new RegExp(l.keys[0],l.flags).exec(r);null!==e&&(t=t<e.index?e.index:t)}t>0&&(r=r.slice(0,t)+n(e,r.slice(t)));let s=new RegExp(i.keys[0],i.flags),c=s.exec(r);if(null!==c){let e=(s=new RegExp(i.keys[1],i.flags)).exec(r),t=[i.keys[0].replace(new RegExp("\\\\","g"),""),i.keys[1].replace(new RegExp("\\\\","g"),"")];null!==e&&(r=r.slice(0,c.index)+i.replacer(r.slice(c.index+t[0].length,e.index),l)+r.slice(e.index+t[1].length))}}return r}l.r(r),describe("replaceSingle",()=>{it("simple",()=>{let e="{{repl}} is replaced";expect(t("{{repl}}",e,"This")).toEqual("This is replaced"),expect(t("{{repl} }",e,"This")).toEqual("{{repl}} is replaced")})}),describe("replace Complex",()=>{it("complex",()=>{let e="<str><hello/> <a>this is a referrer<a>this is a referrer</a></a></str>",r=[{flags:"g",keys:["<hello/>"],replacer:(e,r)=>"hello"},{flags:"g",keys:["<a>","</a>"],replacer:(e,r)=>`<l>${e}</l>`}];expect(n(r,e)).toEqual("<str>hello <l>this is a referrer<l>this is a referrer</l></l></str>"),e="{{str(this is a text)}}",r=[{flags:"g",keys:["\\{\\{str\\(","\\)\\}\\}"],replacer:(e,r)=>`${e||"none"}`},{flags:"g",keys:["\\{\\{service\\}\\}"],replacer:(e,r)=>`[${(r=r||{service:"LOGS"}).service}]`}],expect(n(r,e)).toEqual("this is a text");expect(n(r,"{{service}}",{service:"LOG"})).toEqual("[LOG]")})})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,